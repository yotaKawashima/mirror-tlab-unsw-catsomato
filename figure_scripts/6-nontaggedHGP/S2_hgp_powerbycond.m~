% Plots the evoked power in each condition across 50-150 Hz

%% Set overall variables

% PREREQUISITES:
% Add the git repo to path.

% directory where the drive is mounted. 
disk_path = '/media/rannee/UNSW_Cat_Somatos/';

% set figure path to be this temporary directory that is not on the main
% script or figure paths (this is a directory where the old and broken
% scripts are kept).
fig_path = [];

% highest level directory of data
data_path = [disk_path 'data/'];

% directory with the raw files
raw_path = [data_path 'raw/'];

% path to third party toolboxes
tool_path = [disk_path 'scripts/thirdparty_toolboxes/'];
chron_dir = [tool_path 'chronux/'];

%% File specific variables
cat_name = 'C20110808_R03';
ch = 102;

data_dir = [data_path 'included_datasets/' cat_name '/epoched_rsampsl_biprref_evkresp_cmtspwr_evkdpwr_hgpcomp/'];

filename = [cat_name '_S2_FxxxAxxx_FxxxAxxx_epoched_rsampsl_biprref_evkresp_cmtspwr_evkdpwr_hgpcomp.mat'];

%% Load and pre-process

load([data_dir, filename])

% Work out if monopolar channels are still present in the data
if strcmp(data.label{1}(1:3), 'raw')
    % monopolar channels present. remove them. 
    c1 = prod(data.custom.spatialconfig)+1;
    data.label = data.label(c1:end);
    for k = 1:numel(data.trial)
        data.trial{k} = data.trial{k}(c1:end, :, :);
    end
end

% Get some required variables
rows = data.custom.subplotconfig(1);
cols = data.custom.subplotconfig(2);
nCond = rows*cols;
plotdata = data.trial;

%% Check if the channel is suitable
% perform a t-test
[h, p] = ttest(mean(plotdata{nCond-1}(ch, :, :), 2), 0, 'Tail', 'right');

% If channel is not significant, don't bother plotting.
if h == 0 || p>0.05
    fprintf('Skipping channel %i (%s)\n', ch, data.label{ch})
    return
else
    fprintf('t-test passed. Plotting channel %i (%s)\n', ch, data.label{ch})
end


%% Plot
figure(ch); clf

yls = zeros(nCond-1, 2);

for p = 1:nCond-1
    subtightplot(rows, cols, p+1)
    plot(data.freq{1}, mean(plotdata{p}(ch,:,:),3))
    yls(p, :) = find_lims(mean(plotdata{p}(ch,:,:),3));
end

ylims = find_lims(yls);
ylims(1) = ylims(1)-1;
ylims(2) = ylims(2)+1;

catnames = cell(numel(data.trial)+1, 1);
catnames{1} = 'F023A000_F200A000';
catnames(2:numel(data.trial)+1) = data.datalabels;

subtightplotcleaner(ch, [rows, cols], 'catnames', catnames, ...
    'xaxisscale', 'tight', 'yaxisscale', ylims, ...
    'sideinds', 1:8, 'topinds', 10:17)


    str = sprintf('%s_S2_Ch%03i_highgammapower', cat_name, ch);
    print(gcf, '-depsc', str);
end




%%
% 
% 
% clear cat
% close all
% 
% % adapted from 18Jul
% 
% cat{1} = {'C20110808_R03',  102};
% % cat{2} = {'C20110808_R01', [34, 40, 94, 98, 101, 102, 108, 112]};
% % cat{3} = {'C20110808_R04', [34, 35, 94, 101, 108, 112]};
% %cat{4} = {'C20110510_R05', []}; % none
% %cat{5} = {'C20110510_R06', []}; % none
% %cat{6} = {'C20110511_R02', []}; % none
% %cat{7} = {'C20110808_R06', []};
% %cat{8} = {'C20110808_R09', []};
% %cat{9} = {'C20110808_Rx4', []};
% 
% for c = 1:numel(cat);
%     
%     if isempty(cat{c})
%         continue
%     end
%     
%     load(['/media/rannee/UNSW_Cat_Somatos/data/included_datasets/' cat{c}{1} ...
%         '/epoched_rsampsl_biprref_evkresp_cmtspwr_evkdpwr_hgpcomp/' cat{c}{1} ...
%         '_S2_FxxxAxxx_FxxxAxxx_epoched_rsampsl_biprref_evkresp_cmtspwr_evkdpwr_hgpcomp.mat'])
%     
%     if strcmp(data.label{1}(1:3), 'raw')
%         % then this still contains monopolar channels
%         c1 = prod(data.custom.spatialconfig)+1;
%         data.label = data.label(c1:end);
%         for k = 1:numel(data.trial)
%             data.trial{k} = data.trial{k}(c1:end, :, :);
%         end
%     end
%     
%     plotdata = data.trial;
%     
%     if isempty(cat{c}{2})
%         cat{c}{2}=1:numel(data.label);
%         ifprint=false;
%     else
%         ifprint=true;
%     end
%     
%     % plot prep
%     rows = data.custom.subplotconfig(1);
%     cols = data.custom.subplotconfig(2);
%     nCond = rows*cols;
%     
%     sk = 0;
%     
%     for ch = cat{c}{2}%1:numel(data.label)
%         
%         
%         % perform a t-test
%         [h, p] = ttest(mean(plotdata{nCond-1}(ch, :, :), 2), 0, 'Tail', 'right');
%         
%         if h == 0 || p>0.05
%             fprintf('Skipping channel %i\n', ch)
%             disp(data.label(ch))
%             sk = sk+1;
%             continue
%         end
%         
%         
%         figure(ch); clf
%         
%         yls = zeros(nCond-1, 2);
%         disp(data.label(ch))
%         
%         for p = 1:nCond-1
%             subtightplot(rows, cols, p+1)
%             plot(data.freq{1}, mean(plotdata{p}(ch,:,:),3))
%             yls(p, :) = find_lims(mean(plotdata{p}(ch,:,:),3));
%         end
%         
%         ylims = find_lims(yls);
%         ylims(1) = ylims(1)-1;
%         ylims(2) = ylims(2)+1;
%         
%         catnames = cell(numel(data.trial)+1, 1);
%         catnames{1} = 'F023A000_F200A000';
%         catnames(2:numel(data.trial)+1) = data.datalabels;
%         
%         subtightplotcleaner(ch, [rows, cols], 'catnames', catnames, ...
%             'xaxisscale', 'tight', 'yaxisscale', ylims, ...
%             'sideinds', 1:8, 'topinds', 10:17)
%         
%         if ifprint
%             str = sprintf('%s_S2_Ch%03i_highgammapower', cat{c}{1}, ch);
%             print(gcf, '-depsc', str);
%         end
%     end
%     
%     fprintf('Skipped %i channels.\n', sk)
%     
% end